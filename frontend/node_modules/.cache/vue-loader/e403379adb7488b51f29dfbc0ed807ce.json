{"remainingRequest":"/home/danijel/Documents/Workspace/mc2/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/danijel/Documents/Workspace/mc2/frontend/src/assets/scripts/fitText/fitText.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/danijel/Documents/Workspace/mc2/frontend/src/assets/scripts/fitText/fitText.vue","mtime":1555954109910},{"path":"/home/danijel/Documents/Workspace/mc2/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1555505910712},{"path":"/home/danijel/Documents/Workspace/mc2/frontend/node_modules/babel-loader/lib/index.js","mtime":1555505902219},{"path":"/home/danijel/Documents/Workspace/mc2/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1555505910712},{"path":"/home/danijel/Documents/Workspace/mc2/frontend/node_modules/vue-loader/lib/index.js","mtime":1555505911257}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\nexport default {\n  props: {\n    targetLineCount: {\n      'default': 1,\n      type: Number,\n    },\n    unit: {\n      'default': 'em',\n      type: String,\n    },\n    min: {\n      'default': 0.5,\n      type: Number,\n    },\n    max: {\n      'default': 1,\n      type: Number,\n    }\n  },\n  data() {\n    return {\n      observer: null,\n    }\n  },\n  methods: {\n    calculate() {\n      let element = this.$el;\n      // first make it an inline block and set the line height to a fixed pixel value\n      element.style.display = 'inline-block';\n      element.style.lineHeight = '1px';\n\n      // then keep trying untill it fits\n      let fontSize = this.max;\n      let stepSize = (this.unit === 'px') ? 1 : 0.05;\n      element.style.fontSize = fontSize + this.unit;\n\n      while (element.offsetHeight > this.targetLineCount && fontSize > this.min) {\n        fontSize -= stepSize;\n        element.style.fontSize = fontSize + this.unit;\n      }\n      // found it!!\n\n      // reset the styles\n      element.style.display = null;\n      element.style.lineHeight = null;\n    }\n  },\n  mounted() {\n    this.calculate();\n\n    if ('MutationObserver' in window && this.observer === null) {\n      // Create the observer (and what to do on changes...)\n      this.observer = new MutationObserver(this.calculate);\n\n      // Setup the observer\n      this.observer.observe(\n        this.$el,\n        { subtree: true, characterData: true }\n      );\n    }\n  },\n  beforeDestroy: function() {\n    // Clean up\n    this.observer.disconnect();\n  }\n}\n",{"version":3,"sources":["fitText.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"fitText.vue","sourceRoot":"src/assets/scripts/fitText","sourcesContent":["<template>\n  <span>\n    <slot></slot>\n  </span>\n</template>\n\n<script>\n  export default {\n    props: {\n      targetLineCount: {\n        'default': 1,\n        type: Number,\n      },\n      unit: {\n        'default': 'em',\n        type: String,\n      },\n      min: {\n        'default': 0.5,\n        type: Number,\n      },\n      max: {\n        'default': 1,\n        type: Number,\n      }\n    },\n    data() {\n      return {\n        observer: null,\n      }\n    },\n    methods: {\n      calculate() {\n        let element = this.$el;\n        // first make it an inline block and set the line height to a fixed pixel value\n        element.style.display = 'inline-block';\n        element.style.lineHeight = '1px';\n\n        // then keep trying untill it fits\n        let fontSize = this.max;\n        let stepSize = (this.unit === 'px') ? 1 : 0.05;\n        element.style.fontSize = fontSize + this.unit;\n\n        while (element.offsetHeight > this.targetLineCount && fontSize > this.min) {\n          fontSize -= stepSize;\n          element.style.fontSize = fontSize + this.unit;\n        }\n        // found it!!\n\n        // reset the styles\n        element.style.display = null;\n        element.style.lineHeight = null;\n      }\n    },\n    mounted() {\n      this.calculate();\n\n      if ('MutationObserver' in window && this.observer === null) {\n        // Create the observer (and what to do on changes...)\n        this.observer = new MutationObserver(this.calculate);\n\n        // Setup the observer\n        this.observer.observe(\n          this.$el,\n          { subtree: true, characterData: true }\n        );\n      }\n    },\n    beforeDestroy: function() {\n      // Clean up\n      this.observer.disconnect();\n    }\n  }\n</script>"]}]}