{"remainingRequest":"/home/danijel/Documents/Workspace/mc2/frontend/node_modules/babel-loader/lib/index.js!/home/danijel/Documents/Workspace/mc2/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/danijel/Documents/Workspace/mc2/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/danijel/Documents/Workspace/mc2/frontend/src/assets/scripts/fitText/fitText.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/danijel/Documents/Workspace/mc2/frontend/src/assets/scripts/fitText/fitText.vue","mtime":1558647631199},{"path":"/home/danijel/Documents/Workspace/mc2/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1557082350867},{"path":"/home/danijel/Documents/Workspace/mc2/frontend/node_modules/babel-loader/lib/index.js","mtime":1557082335768},{"path":"/home/danijel/Documents/Workspace/mc2/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1557082350867},{"path":"/home/danijel/Documents/Workspace/mc2/frontend/node_modules/vue-loader/lib/index.js","mtime":1557082351628}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\nexport default {\n  props: {\n    targetLineCount: {\n      'default': 1,\n      type: Number\n    },\n    unit: {\n      'default': 'em',\n      type: String\n    },\n    min: {\n      'default': 0.5,\n      type: Number\n    },\n    max: {\n      'default': 1,\n      type: Number\n    }\n  },\n  data: function data() {\n    return {\n      observer: null\n    };\n  },\n  methods: {\n    calculate: function calculate() {\n      var element = this.$el; // first make it an inline block and set the line height to a fixed pixel value\n\n      element.style.display = 'inline-block';\n      element.style.lineHeight = '1px'; // then keep trying untill it fits\n\n      var fontSize = this.max;\n      var stepSize = this.unit === 'px' ? 1 : 0.05;\n      element.style.fontSize = fontSize + this.unit;\n\n      while (element.offsetHeight > this.targetLineCount && fontSize > this.min) {\n        fontSize -= stepSize;\n        element.style.fontSize = fontSize + this.unit;\n      } // found it!!\n      // reset the styles\n\n\n      element.style.display = null;\n      element.style.lineHeight = null;\n    }\n  },\n  mounted: function mounted() {\n    this.calculate();\n\n    if ('MutationObserver' in window && this.observer === null) {\n      // Create the observer (and what to do on changes...)\n      this.observer = new MutationObserver(this.calculate); // Setup the observer\n\n      this.observer.observe(this.$el, {\n        subtree: true,\n        characterData: true\n      });\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    // Clean up\n    this.observer.disconnect();\n  }\n};",{"version":3,"sources":["fitText.vue"],"names":[],"mappings":";;;;;;;AAOA,eAAA;AACA,EAAA,KAAA,EAAA;AACA,IAAA,eAAA,EAAA;AACA,iBAAA,CADA;AAEA,MAAA,IAAA,EAAA;AAFA,KADA;AAKA,IAAA,IAAA,EAAA;AACA,iBAAA,IADA;AAEA,MAAA,IAAA,EAAA;AAFA,KALA;AASA,IAAA,GAAA,EAAA;AACA,iBAAA,GADA;AAEA,MAAA,IAAA,EAAA;AAFA,KATA;AAaA,IAAA,GAAA,EAAA;AACA,iBAAA,CADA;AAEA,MAAA,IAAA,EAAA;AAFA;AAbA,GADA;AAmBA,EAAA,IAnBA,kBAmBA;AACA,WAAA;AACA,MAAA,QAAA,EAAA;AADA,KAAA;AAGA,GAvBA;AAwBA,EAAA,OAAA,EAAA;AACA,IAAA,SADA,uBACA;AACA,UAAA,OAAA,GAAA,KAAA,GAAA,CADA,CAEA;;AACA,MAAA,OAAA,CAAA,KAAA,CAAA,OAAA,GAAA,cAAA;AACA,MAAA,OAAA,CAAA,KAAA,CAAA,UAAA,GAAA,KAAA,CAJA,CAMA;;AACA,UAAA,QAAA,GAAA,KAAA,GAAA;AACA,UAAA,QAAA,GAAA,KAAA,IAAA,KAAA,IAAA,GAAA,CAAA,GAAA,IAAA;AACA,MAAA,OAAA,CAAA,KAAA,CAAA,QAAA,GAAA,QAAA,GAAA,KAAA,IAAA;;AAEA,aAAA,OAAA,CAAA,YAAA,GAAA,KAAA,eAAA,IAAA,QAAA,GAAA,KAAA,GAAA,EAAA;AACA,QAAA,QAAA,IAAA,QAAA;AACA,QAAA,OAAA,CAAA,KAAA,CAAA,QAAA,GAAA,QAAA,GAAA,KAAA,IAAA;AACA,OAdA,CAeA;AAEA;;;AACA,MAAA,OAAA,CAAA,KAAA,CAAA,OAAA,GAAA,IAAA;AACA,MAAA,OAAA,CAAA,KAAA,CAAA,UAAA,GAAA,IAAA;AACA;AArBA,GAxBA;AA+CA,EAAA,OA/CA,qBA+CA;AACA,SAAA,SAAA;;AAEA,QAAA,sBAAA,MAAA,IAAA,KAAA,QAAA,KAAA,IAAA,EAAA;AACA;AACA,WAAA,QAAA,GAAA,IAAA,gBAAA,CAAA,KAAA,SAAA,CAAA,CAFA,CAIA;;AACA,WAAA,QAAA,CAAA,OAAA,CACA,KAAA,GADA,EAEA;AAAA,QAAA,OAAA,EAAA,IAAA;AAAA,QAAA,aAAA,EAAA;AAAA,OAFA;AAIA;AACA,GA5DA;AA6DA,EAAA,aAAA,EAAA,yBAAA;AACA;AACA,SAAA,QAAA,CAAA,UAAA;AACA;AAhEA,CAAA","sourcesContent":["<template>\n  <span>\n    <slot></slot>\n  </span>\n</template>\n\n<script>\n  export default {\n    props: {\n      targetLineCount: {\n        'default': 1,\n        type: Number,\n      },\n      unit: {\n        'default': 'em',\n        type: String,\n      },\n      min: {\n        'default': 0.5,\n        type: Number,\n      },\n      max: {\n        'default': 1,\n        type: Number,\n      }\n    },\n    data() {\n      return {\n        observer: null,\n      }\n    },\n    methods: {\n      calculate() {\n        let element = this.$el;\n        // first make it an inline block and set the line height to a fixed pixel value\n        element.style.display = 'inline-block';\n        element.style.lineHeight = '1px';\n\n        // then keep trying untill it fits\n        let fontSize = this.max;\n        let stepSize = (this.unit === 'px') ? 1 : 0.05;\n        element.style.fontSize = fontSize + this.unit;\n\n        while (element.offsetHeight > this.targetLineCount && fontSize > this.min) {\n          fontSize -= stepSize;\n          element.style.fontSize = fontSize + this.unit;\n        }\n        // found it!!\n\n        // reset the styles\n        element.style.display = null;\n        element.style.lineHeight = null;\n      }\n    },\n    mounted() {\n      this.calculate();\n\n      if ('MutationObserver' in window && this.observer === null) {\n        // Create the observer (and what to do on changes...)\n        this.observer = new MutationObserver(this.calculate);\n\n        // Setup the observer\n        this.observer.observe(\n          this.$el,\n          { subtree: true, characterData: true }\n        );\n      }\n    },\n    beforeDestroy: function() {\n      // Clean up\n      this.observer.disconnect();\n    }\n  }\n</script>"],"sourceRoot":"src/assets/scripts/fitText"}]}